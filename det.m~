function det()
%
% read in speech file, chooses section of speech and solve for set of
% lpc coefficients using the autocorrelation method, the covariance
% method and the lattice method
%
% plot the resulting spectra from all three methods
%
% read in waveform for a speech file
%
% [xin,fs,mode,format]=loadwav('ah_truncated.wav');xin)
filename="fun.wav"
[xin,fs,mode,format]=loadwav(filename);

% normalize input to [-1,1] range and play out sound file
xinn=xin/max(xin);
[nrows ncol]=size(xin);
m=1
N=160;
p=10;

% print out number of samples in file, read in plotting parameters
fprintf(' number of samples in file: %7.0f \n', nrows);

% autocorrelation method--choose section of speech, window using Hamming
% window, compute autocorrelation for i=0,1,...,p
% get original spectrum
xino=[(xin(m:m+N-1).*hamming(N))' zeros(1,512-N)];
h0=fft(xino,512);
f=0:fs/512:fs-fs/512;
plot(f(1:257),20*log10(abs(h0(1:257)))),title(stitle),ylabel('log magnitude (dB)'),...
xlabel('frequency in Hz');
hold on;

% autocorrelation method
xf=xin(m:m+N-1);
[R,E,k,alpha,G]=durbin(xf,N,p,wtype);
alphap=alpha(1:p,p);
num=[1 -alphap'];
[ha,f]=freqz(G,num,512,fs);
plot(f,20*log10(abs(ha)),'k-');

% fvtool(G,num);
% covariance method--choose section of speech, compute correlation matrix
% and covariance vector
xc=xin(m-p:m+N-1);
[phim,phiv,EC,alphac,GC]=cholesky(xc,N,p);
numc=[1 -alphac'];
[hc,f]=freqz(GC,numc,512,fs);
plot(f,20*log10(abs(hc)),'g--');

% fvtool(GC,numc);
% lattice method--choose section of speech, compute forward and backward
% errors
xl=xin(m-p:m+N-1);
[EL,alphal,GL,k]=lattice(xl,N,p);
alphalat=alphal(:,p);
numl=[1 -alphalat'];
[hl,f]=freqz(GL,numl,512,fs);
plot(f,20*log10(abs(hl)),'r-.');
legend('windowed speech','autocorrelation method(-)','covariance method(--)','lattice me% fvtool(GL,numl)';
function [R,E,k,alpha,G]=durbin(xf,N,p,wtype)

% function [R,E,k,alpha,G]=durbin(xf,N,p,wtype)
%
% compute window based on wtype; wtype=1 for Hamming window, wtype=0 for
% Rectangular window
%
% compute R(0:p) from windowed xf
%
% solve Durbin recursion fo E,k,alpha in 8 easy steps
% step 1--E(0)=R(0)
% step 2--k(1)=R(1)/E(0)
% step 3--alpha(1,1)=k(1)
% step 4--E(1)=(1-k(1).^2)E(0)
% steps 5-8--for i=2,3,...,p;
% step 5--k(i)=[R(i)-sum from j=1 to i-1 alpha(j,i-1).*R(i-j)]/E(i-1)
% step 6--alpha(i,i)=k(i)
% step 7--for j=1,2,...,i-1
% alpha(j,i)=alpha(j,i-1)-k(i)alpha(i-j,i-1)
% step 8--E(i)=(1-k(i).^2)E(i-1)
%
if wtype==1
win=hamming(N);
else
win=boxcar(N);
end

% window frame for autocorrelation method
xf=xf.*win;
% compute autocorrelation
for k=0:p
R(k+1)=sum(xf(1:N-k).*xf(k+1:N));
end

% solve for lpc coefficients using Durbin's method
E=zeros(1,p);
k=zeros(1,p);
alpha=zeros(p,p);
E(1)=R(1);
ind=1;
k(ind)=R(ind+1)/E(ind);
alpha(ind,ind)=k(ind);
E(ind+1)=(1-k(ind).^2)*E(ind);
for ind=2:p
k(ind)=(R(ind+1)-sum(alpha(1:ind-1,ind-1)'.*R(ind:-1:2)))/E(ind);
alpha(ind,ind)=k(ind);
for jnd=1:ind-1
alpha(jnd,ind)=alpha(jnd,ind-1)-k(ind)*alpha(ind-jnd,ind-1);
end
E(ind+1)=(1-k(ind).^2)*E(ind);
end
G=sqrt(E(p+1));

function [phim,phiv,EC,alphac,GC]=cholesky(xc,N,p)
% cholesky decomposition
%
% first compute phim(1,1)...phim(p,p)
% next compute phiv(1,0)...phiv(p,0)
%
for i=1:p
for k=1:p
phim(i,k)=sum(xc(p+1-i:p+N-i).*xc(p+1-k:p+N-k));
end
end
for i=1:p
phiv(i)=sum(xc(p+1-i:p+N-i).*xc(p+1:p+N));
phiz(i)=sum(xc(p+1:p+N).*xc(p+1-i:p+N-i));
end
phi0=sum(xc(p+1:p+N).^2);

% use simple matrix inverse to solve equations--come back to Cholesky decomposition later
phiv=phiv';
% solve using matrix inverse, phim*alphac=phiv
% alphac=inv(phim)*phiv
%
alphac=inv(phim)*phiv;
EC=phi0-sum(alphac'.*phiz);
GC=sqrt(EC);

function [EL,alphal,GL,k]=lattice(xc,N,p)
% lattice solution to lpc equations
%
% follow 10 step solution
% step 1--set e(0)(m)=b(0)(m)=s(m)
% step 2--compute k1=alpha(1,1) from basic lattice reflection coefficient
% equation 8.89
% step 3--determine forward and backward errors e(1)(m) and b(1)(m) from
% eqns 8.84 and 8.87
% step 4--set i=2
% step 5--determine ki=alpha(i,i) from eqn 8.89
% step 6--determine alpha(j,i) for j-1,2,...,i-1 from eqn 8.70
% step 7--determine e(i)(m) and b(i)(m) from eqns. 8.84 and 8.87
% step 8--set i=i+1
% step 9--if i<=p, go to step 5
% step 10--finished
e(:,1)=xc;
b(:,1)=xc;
k(1)=sum(e(p+1:p+N,1).*b(p:p+N-1,1))/sqrt((sum(e(p+1:p+N,1).^2)*sum(b(p:p+N-1,1).^2)));
alphal(1,1)=k(1);
btemp=[0 b(:,1)']';
e(1:N+p,2)=e(1:N+p,1)-k(1)*btemp(1:N+p);
b(1:N+p,2)=btemp(1:N+p)-k(1)*e(1:N+p,1);
for i=2:p
k(i)=sum(e(p+1:p+N,i).*b(p:p+N-1,i))/sqrt((sum(e(p+1:p+N,i).^2)*sum(b(p:p+N-1,i).^2)alphal(i,i)=k(i);
for j=1:i-1
alphal(j,i)=alphal(j,i-1)-k(i)*alphal(i-j,i-1);
end
btemp=[0 b(:,i)']';
e(1:N+p,i+1)=e(1:N+p,i)-k(i)*btemp(1:N+p);
b(1:N+p,i+1)=btemp(1:N+p)-k(i)*e(1:N+p,i);
end
EL=sum(xc(p+1:p+N).^2);
for i=1:p
EL=EL*(1-k(i).^2);
end
GL=sqrt(EL);

end
